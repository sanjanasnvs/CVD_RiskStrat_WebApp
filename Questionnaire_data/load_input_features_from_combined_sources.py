from django.core.management.base import BaseCommand
from accounts.models import CVD_Risk_Model_InputFeatures, CVD_risk_Questionnaire
import pandas as pd
import os
import re

class Command(BaseCommand):
    help = 'Loads model input features by combining sample CSV and mapping Excel'

    def handle(self, *args, **kwargs):
        # --- Step 1: File paths ---
        sample_csv_path = os.path.join('model_files', 'Input features sample files', 'biggestModelnoDropSample.csv')
        mapping_excel_path = os.path.join('Questionnaire_data', 'TS_mapping_with_questions_v1.xlsx')

        # --- Step 2: Read all feature names from CSV (column 0), skipping header row ---
        try:
            sample_df = pd.read_csv(sample_csv_path, header=None, skiprows=1)
            required_features = sample_df[0].dropna().unique().tolist()
        except Exception as e:
            self.stderr.write(f"‚ùå Failed to read sample CSV: {e}")
            return

        # --- Step 3: Load mapping Excel to match features to question IDs ---
        try:
            mapping_df = pd.read_excel(mapping_excel_path)
            mapping_df = mapping_df.dropna(subset=["Column names", "Field ID"])
            feature_to_qid = dict(zip(mapping_df["Column names"].astype(str).str.strip(),
                                      mapping_df["Field ID"].astype(int)))
        except Exception as e:
            self.stderr.write(f"‚ùå Failed to read mapping Excel: {e}")
            return

        created, skipped, unmatched = 0, 0, 0

        for feature_name in required_features:
            feature_name_clean = str(feature_name).strip()

            # Try to find question_id from mapping file
            q_id = feature_to_qid.get(feature_name_clean)

            if q_id:
                try:
                    question = CVD_risk_Questionnaire.objects.get(question_id=q_id)
                except CVD_risk_Questionnaire.DoesNotExist:
                    self.stderr.write(f"‚ö†Ô∏è Feature '{feature_name}' ‚Üí QID {q_id} not found in DB.")
                    unmatched += 1
                    continue
            else:
                self.stderr.write(f"‚ö†Ô∏è No mapping found for feature: '{feature_name}'")
                unmatched += 1
                continue

            # Insert feature into DB if not already present
            obj, was_created = CVD_Risk_Model_InputFeatures.objects.get_or_create(
                question=question,
                feature_name=feature_name_clean,
                defaults={'feature_description': 'Autogenerated from sample + mapping'}
            )

            if was_created:
                self.stdout.write(f"‚úÖ Created: {feature_name}")
                created += 1
            else:
                skipped += 1

        self.stdout.write(self.style.SUCCESS(f"\nüéØ Done: {created} created, {skipped} skipped, 
{unmatched} unmatched"))

